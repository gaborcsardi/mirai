% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{dispatcher}
\alias{dispatcher}
\title{mirai Dispatcher}
\usage{
dispatcher(
  url,
  n = NULL,
  asyncdial = TRUE,
  exitlinger = 100L,
  pollfreqh = 10L,
  pollfreql = 100L,
  ...
)
}
\arguments{
\item{url}{the client URL as a character string, including the port to
connect to and (optionally) a path for websocket URLs e.g.
'tcp://192.168.0.2:5555' or 'ws://192.168.0.2:5555/path'.}

\item{n}{[default NULL] if supplied, this server instance will run as an
active queue (task scheduler) with the specified number of nodes.}

\item{asyncdial}{[default TRUE] whether to dial in to the client
asynchronously. An asynchronous dial is more resilient and will continue
retrying if not immediately successful. However this can mask potential
connection issues and specifying FALSE is useful for debugging purposes,
producing an error if a connection is not immediately possible (e.g.
\code{\link{daemons}} has yet to be called on the client, or the
specified port is not open etc.).}

\item{exitlinger}{[default 100L] time in milliseconds to linger after an exit
signal is received or a timer / task limit is reached, to allow sockets
to flush sends currently in progress. The default permits normal
operations, but should be set wider if computations are expected to
return very large objects.}

\item{pollfreqh}{[default 10L] (applicable to active queues only) the high
polling frequency for the queue in milliseconds (used when there are
active tasks). Setting a lower value will be more responsive but at the
cost of consuming more resources on the queue thread.}

\item{pollfreql}{[default 100L] (applicable to active queues only) the low
polling frequency for the queue in milliseconds (used when there are no
active tasks). Setting a lower value will be more responsive but at the
cost of consuming more resources on the queue thread.}

\item{...}{reserved but not currently used.}
}
\value{
Invisible NULL.
}
\description{
Implements a dispatcher for tasks from clients to servers for processing,
    using a FIFO scheduling rule, queuing tasks as required.
}
\details{
The network topology is such that a dispatcher acts as a gateway
    between clients and servers, ensuring that tasks received from clients
    are dispatched on a FIFO basis to servers for processing. Tasks are
    queued at the dispatcher to ensure tasks are only sent to servers that
    can begin immediate execution of the task.
}
