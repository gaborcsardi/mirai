% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{server}
\alias{server}
\title{mirai Server (Async Executor Daemon)}
\usage{
server(
  url,
  nodes = NULL,
  idletime = Inf,
  walltime = Inf,
  tasklimit = Inf,
  pollfreqh = 5L,
  pollfreql = 50L,
  asyncdial = TRUE,
  ...
)
}
\arguments{
\item{url}{the client URL and port to connect to as a character string e.g.
'tcp://192.168.0.2:5555'.}

\item{nodes}{[default NULL] if supplied, this server instance will run as an
active queue (task scheduler) with the specified number of nodes.}

\item{idletime}{[default Inf] maximum idle time, since completion of the last
task (in milliseconds) before exiting.}

\item{walltime}{[default Inf] soft walltime, or the minimum amount of real
time taken (in milliseconds) before exiting.}

\item{tasklimit}{[default Inf] the maximum number of tasks to execute (task
limit) before exiting.}

\item{pollfreqh}{[default 5L] applicable for an active queue only, the high
polling frequency for the queue in milliseconds (used when there are
active tasks). Setting a lower value will be more responsive but at the
cost of consuming more resources on the queue thread.}

\item{pollfreql}{[default 50L] applicable for an active queue only, the low
polling frequency for the queue in milliseconds (used when there are no
active tasks). Setting a lower value will be more responsive but at the
cost of consuming more resources on the queue thread.}

\item{asyncdial}{[default TRUE] (for debugging purposes) whether to dial in
to the client asynchronously. An asynchronous dial is more resilient and
will continue retrying if not immediately successful, however this can
mask potential connection issues. If FALSE, will error if a connection is
not immediately possible (e.g. \code{\link{daemons}} has yet to be called
on the client, or the specified port is not open etc.).}

\item{...}{not currently used.}
}
\value{
Invisible NULL.
}
\description{
Implements a persistent executor/server for the remote process. Awaits data,
    evaluates an expression in an environment containing the supplied data,
    and returns the result to the caller/client.
}
\details{
The network topology is such that server daemons dial into the
    client, which listens at the '.url' address. In this way, network
    resources may be easily added or removed at any time and the client
    automatically distributes tasks to all available servers.

    If 'nodes' is supplied, this daemon is launched as an active server queue,
    directing a cluster with the specified number of nodes. The nodes are
    launched automatically as processes on the same machine.

    An active server queue may be used in combination with other servers or
    server queues.
}
