% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{launch}
\alias{launch}
\title{Launch Daemon}
\usage{
launch(url, ..., .compute = "default")
}
\arguments{
\item{url}{the character host URL or vector of host URLs, including the port
    to connect to (and optionally for websockets, a path), e.g.
    tcp://192.168.0.2:5555' or 'ws://192.168.0.2:5555/path'

    \strong{or} integer index value, or vector of index values, of the
    dispatcher URLs, where applicable.}

\item{...}{(optional) additional arguments passed to \code{\link{daemon}}.}

\item{.compute}{[default 'default'] character compute profile (each compute
profile has its own set of daemons for connecting to different resources).}
}
\value{
Invisible NULL.
}
\description{
Utility function which calls \code{\link{daemon}} in a background
    \code{Rscript} process. May be used to re-launch local daemons that have
    timed out.
}
\section{Additional arguments}{


    Additional arguments may be specified as part of '\code{...}' to be
    passed on to \code{\link{daemon}}:

    \itemize{
    \item{\strong{asyncdial}} {[default FALSE] whether to perform dials
    asynchronously. The default FALSE will error if a connection is not
    immediately possible (e.g. \code{\link{daemons}} has yet to be called, or
    the specified port is not open etc.). Specifying TRUE continues retrying
    (indefinitely) if not immediately successful, which is more resilient but
    can mask potential connection issues.}
    \item{\strong{output}} {[default FALSE] Specify as TRUE to provide
    redirection of output (stdout and stderr) from the daemon to the host
    process. This option is only applicable when not using dispatcher.}
    }

    TLS certificates generated by \code{\link{daemons}} and stored in the
    specified compute profile are automatically passed to the daemon. In this
    case, there is no need to specify 'tls' as part of '\code{...}'.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

daemons(n = 2L, url = "ws://[::1]:0")
launch(1:2, maxtasks = 10L)
Sys.sleep(1)
info()
daemons(0)

daemons(n = 2L, url = "tls+tcp://[::1]:0")
launch(info(alt = TRUE)$urls, idletime = 60000L, timerstart = 1L)
Sys.sleep(1)
info()
daemons(0)

}

}
