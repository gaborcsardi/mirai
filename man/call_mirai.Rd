% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{call_mirai}
\alias{call_mirai}
\alias{collect_mirai}
\title{mirai (Call Value)}
\usage{
call_mirai(x)

collect_mirai(x)
}
\arguments{
\item{x}{a \sQuote{mirai} object.}
}
\value{
For \code{call_mirai}: the passed \sQuote{mirai} (invisibly). The
    retrieved value is stored at \code{$data}.

    For \code{collect_mirai}: an object (the return value of the
    \sQuote{mirai}).
}
\description{
\code{call_mirai} waits for the \sQuote{mirai} to resolve if still in
    progress, storing the value at \code{$data}, and returns the
    \sQuote{mirai} object.

\code{collect_mirai} waits for the \sQuote{mirai} to resolve if still in
    progress, and returns its value directly. It is a more efifcient version
    of and equivalent to \code{call_mirai(x)$data}.
}
\section{User Interrupts}{


    These functions will wait for the asynchronous operation to complete if
    still in progress (blocking). Designed for production usage, they are not
    user-interruptible.

    \code{x[]} may be used to wait for and return the value of a mirai
    \code{x}, and is a user-interruptible equivalent to
    \code{collect_mirai(x)}.
}

\section{Alternatively}{


    The value of a \sQuote{mirai} may be accessed at any time at
    \code{$data}, and if yet to resolve, an \sQuote{unresolved} logical NA
    will be returned instead.

    Using \code{\link{unresolved}} on a \sQuote{mirai} returns TRUE only if
    it has yet to resolve and FALSE otherwise. This is suitable for use in
    control flow statements such as \code{while} or \code{if}.
}

\section{Errors}{


    If an error occurs in evaluation, the error message is returned as a
    character string of class \sQuote{miraiError} and \sQuote{errorValue}
    (the stack trace is available at \code{$stack.trace} on the error
    object). \code{\link{is_mirai_error}} may be used to test for this.

    When not using dispatcher, if a daemon crashes or terminates unexpectedly
    during evaluation, an \sQuote{errorValue} 19 (Connection reset) is
    returned. If using dispatcher, the mirai will remain unresolved and it
    will be automatically re-tried on the next daemon to connect to the
    particular instance. To cancel the task instead, use
    \code{saisei(force = TRUE)} (see \code{\link{saisei}}).

    \code{\link{is_error_value}} tests for all error conditions including
    \sQuote{mirai} errors, interrupts, and timeouts.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

# using call_mirai() / collect_mirai()
df1 <- data.frame(a = 1, b = 2)
df2 <- data.frame(a = 3, b = 1)
m <- mirai(as.matrix(rbind(df1, df2)), df1 = df1, df2 = df2, .timeout = 1000)
call_mirai(m)$data

collect_mirai(m)

# using x[]
m[]

# using unresolved()
m <- mirai(
  {
    res <- rnorm(n)
    res / rev(res)
  },
  n = 1e6
)
while (unresolved(m)) {
  cat("unresolved\n")
  Sys.sleep(0.1)
}
str(m$data)

}

}
