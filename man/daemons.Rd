% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{daemons}
\alias{daemons}
\title{daemons (Background Processes)}
\usage{
daemons(n, .url)
}
\arguments{
\item{n}{integer number of daemons to set | NULL to close existing connections
and reset | 'view' to view the current number of daemons.}

\item{.url}{character client URL e.g. 'tcp://192.168.0.2:5555' at which server
processes started using \code{.()} should connect to.}
}
\value{
Depending on 'n' specified:
    \itemize{
    \item{integer: integer change in number of daemons (created or destroyed).}
    \item{NULL: inivisible NULL, closing existing connections and resetting
    the socket.}
    \item{'view': integer number of currently set daemons.}
    }
}
\description{
Set or view the number of daemons (background processes). Create persistent
    background processes to receive \code{\link{mirai}} requests. This
    provides an efficient solution for async operations on a local machine as
    well as allowing requests to be sent across a network.
}
\details{
\{mirai\} will revert to the default behaviour of creating a new
    background process for each request if the number of daemons is set to 0.

    Setting a custom client URL automatically sets the number of daemons to 1,
    unless 'n' is otherwise specified. If only a character string is provided
    as an argument, this is taken to be the client URL and 'n' is set to 1 by
    default.

    Calling \code{daemons()} without any arguments returns the 'nanoSocket'
    for connecting to the daemons, or NULL if it is yet to be created.
}
\section{Information}{


    Daemons provide a potentially more efficient solution for async operations
    as new processes no longer need to be created on an ad hoc basis.

    Setting a client URL also allows tasks to be distributed across the
    network. The network togology is that server daemons dial into the client
    socket, such that network resources may be easily added or removed at any
    time.

    The current implementation is low-level and ensures tasks are
    evenly-distributed amongst daemons without actively managing a task queue.
    This approach provides a robust and resource-light solution, particularly
    well-suited to working with similar-length tasks, or where the number of
    concurrent tasks typically does not exceed the number of available
    daemons.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

# Create 4 daemons
daemons(4)
# View the number of active daemons
daemons("view")
# Reset to zero
daemons(0)

}

}
