% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{daemons}
\alias{daemons}
\title{daemons (Persistent Server Processes)}
\usage{
daemons(..., q = FALSE)
}
\arguments{
\item{...}{\emph{(depending on the type of argument supplied)}

    \strong{numeric}: integer number of local daemons to set.

    \strong{character}: for distributing tasks across the network: the client
    URL and port accepting incoming connections e.g. 'tcp://192.168.0.2:5555'
    at which server processes started using \code{\link{server}} or
    \code{\link{serverq}} should connect to. For example to listen to port
    5555 on all interfaces on the host, specify either 'tcp://:5555',
    'tcp://*:5555' or 'tcp://0.0.0.0:5555'.}

\item{q}{[default FALSE] (applicable only for local daemons) logical value
whether to maintain an active queue. This requires resources to maintain,
however ensures optimal allocation of tasks to daemons (see section 'Local
Daemons' below).}
}
\value{
Integer number of daemons set (1L if supplying a client URL).
    Calling \code{daemons()} without any arguments returns the 'nanoSocket'
    for connecting to the daemons, or NULL if it is yet to be created.
}
\description{
Set 'daemons' or persistent server processes receiving \code{\link{mirai}}
    requests. These are, by default, automatically created on the local
    machine. Alternatively, a client URL may be set to receive connections
    from remote servers started with \code{\link{server}} or
    \code{\link{serverq}} for distributing tasks across the network.
}
\details{
Use \code{daemons(0)} to reset all daemon connections at any time.
    \{mirai\} will revert to the default behaviour of creating a new
    background process for each request.

    When specifying a client URL, all daemons dialing into the client are
    detected automatically and resources may be added or removed dynamically.
    Further specifying a numeric number of daemons has no effect, with the
    exception that \code{daemons(0)} will always attempt to shutdown all
    connected daemons.

    Setting a new client URL will attempt to shutdown all daemons connected
    at the existing address before opening a connection at the new address.
}
\section{Local Daemons}{


    Daemons provide a potentially more efficient solution for asynchronous
    operations as new processes no longer need to be created on an ad hoc
    basis.

    The default implementation with \code{q = FALSE} is low-level and ensures
    tasks are evenly-distributed amongst daemons. This provides a robust and
    resource-light approach, particularly suited to working with
    similar-length tasks, or where the number of concurrent tasks typically
    does not exceed available daemons.

    Alternatively, specifying \code{q = TRUE} maintains an active queue. This
    consumes additional resources, however ensures optimal allocation of
    tasks to daemons such that they are run as soon as resources become
    available. Note that modifying the number of daemons in an active queue
    requires a reset to zero prior to specifying a revised number.
}

\section{Distributed Computing}{


    Specifying a client URL allows tasks to be distributed across the network.
    The network topology is such that server daemons (started with
    \code{\link{server}} or \code{\link{serverq}}) dial into the client,
    which listens at the client URL. In this way, network resources may
    be added or removed at any time. The client automatically distributes
    tasks to all connected servers.
}

\section{Timeouts}{


    Note: specifying the \code{.timeout} argument when evaluating a 'mirai'
    will always cause the user function to return, however the process may not
    have completed and still be ongoing in the daemon. In such situations, an
    active queue may be prefereable so that new tasks are not assigned to
    those daemons, however performance will still be degraded if they remain
    in use.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

# Create 2 daemons
daemons(2)
# Reset to zero
daemons(0)

}

}
