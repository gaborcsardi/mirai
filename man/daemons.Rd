% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mirai.R
\name{daemons}
\alias{daemons}
\title{daemons (Persistent Server Processes)}
\usage{
daemons(value, ..., .compute = "default")
}
\arguments{
\item{value}{\emph{~ depending on the type of value supplied ~}

    \strong{numeric}: for setting local daemons: integer number of daemons
    (see 'Local Daemons' below).

    \strong{character}: for distributing tasks across the network: the client
    URL as a character string, including a port accepting incoming connections
    and (optionally) a path for websocket URLs e.g. 'tcp://192.168.0.2:5555'
    or 'ws://192.168.0.2:5555/path'. (see 'Distributed Computing' below).

    \strong{missing}: for viewing the currrent status, specify
    \code{daemons()} with no arguments.}

\item{...}{additional named arguments passed to \code{\link{server}}.

    \strong{nodes} supplying an integer number of nodes runs an active queue
    with the specified number of nodes.}

\item{.compute}{(optional) character compute profile to use for creating the
daemons (each compute profile can have its own set of daemons for
connecting to different resources).}
}
\value{
Setting daemons: integer number of daemons set, or the character
    client URL (1L if specifying 'nodes').

    Viewing current status: a named list comprising: \itemize{
    \item{\code{connections}} {- number of active connections.}
    \item{\code{daemons}} {- number of daemons, or the client URL when
    running a passive queue.}
    \item{\code{nodes}} {- a matrix of URL, active (connected) and busy
    status, as well as cumulative tasks assigned and completed (reset if a
    node re-connects), or else NA if not running an active queue.}
    }
}
\description{
Set 'daemons' or persistent server processes receiving \code{\link{mirai}}
    requests. These are, by default, automatically created on the local
    machine. Alternatively, a client URL may be set to receive connections
    from remote servers started with \code{\link{server}} for distributing
    tasks across the network.
}
\details{
Use \code{daemons(0)} to reset all daemon connections at any time.
    \{mirai\} will revert to the default behaviour of creating a new
    background process for each request.

    When specifying a client URL, all daemons dialing into the client are
    detected automatically and resources may be added or removed dynamically.
    Further specifying a numeric number of daemons has no effect, with the
    exception that \code{daemons(0)} will always reset and attempt to
    shutdown all connected daemons.

    Setting a new client URL will attempt to shutdown all daemons connected
    at the existing address before opening a connection at the new address.
}
\section{Local Daemons}{


    Daemons provide a potentially more efficient solution for asynchronous
    operations as new processes no longer need to be created on an \emph{ad
    hoc} basis.

    The default implementation is low-level and ensures tasks are
    evenly-distributed amongst daemons. This provides a robust and
    resource-light approach, particularly suited to working with
    similar-length tasks, or where the number of concurrent tasks typically
    does not exceed available daemons.

    Alternatively, supplying \code{nodes} as an additional argument launches
    an active queue with the specified number of nodes e.g.
    \code{daemons(1, nodes = 8)}. When 'nodes' is specified, the value for
    daemons is disregarded and one active queue is launched in all cases. An
    active queue consumes additional resources, however ensures load balancing
    and optimal scheduling of tasks to nodes. Note that changing the number
    of nodes in an active queue requires a reset to zero prior to specifying
    a revised number.
}

\section{Distributed Computing}{


    \strong{Passive Queues}

    Specifying a client URL allows tasks to be distributed across the network.

    This should be in the form of a character string such as:
    'tcp://192.168.0.2:5555' at which server processes started using
    \code{\link{server}} should connect to. Alternatively, to listen to port
    5555 on all interfaces on the local host, specify either 'tcp://:5555',
    'tcp://*:5555' or 'tcp://0.0.0.0:5555'.

    Specifying the wildcard value zero for the port number e.g. 'tcp://:0' or
    'ws://:0' will automatically assign a free ephemeral port. Use
    \code{daemons()} to query the actual assigned port at any time.

    The network topology is such that server daemons (started with
    \code{\link{server}}) dial into the client, which listens at the client
    URL. In this way, network resources may be easily added or removed at any
    time. The client automatically distributes tasks to all connected servers.

    \strong{Active Queues}

    Supplying a client URL with \code{nodes} as an additional argument will
    launch a local daemon as an active server queue.

    It is recommended in this case to use a websocket URL rather than TCP.
    This allows using only one port to connect to all nodes. This is as a
    websocket URL supports a path after the port number, which can be made
    unique for each node. Specifying a single client URL such as
    'ws://192.168.0.2:5555' with 6 nodes will automatically append a sequence
    to the path, listening to the URLs 'ws://192.168.0.2:5555/1' through
    'ws://192.168.0.2:5555/6'.

    Alternatively, specify a vector of URLs the same length as 'nodes' to
    listen to arbitrary port numbers / paths.

    Individual \code{\link{server}} instances should then be started on the
    remote resource, with each of these specified as the client URL.

    Server nodes may be scaled up or down dynamically, subject to the maximum
    'nodes' initially specified, with the queue automatically adjusting.

    Alternatively, supplying a single TCP URL will listen on a block of URLs
    with ports starting from the supplied port number and incrementing by one
    for the number of nodes specified e.g. the client URL
    'tcp://192.168.0.2:5555' with 6 nodes listens to the contiguous block of
    ports 5555 through 5560.
}

\section{Compute Profiles}{


    By default, the 'default' compute profile is used. Provide a character
    value for '.compute' to create a new compute profile with the name
    specified. Each compute profile retains its own daemons settings, and may
    be operated independently of each other. Some usage examples follow:

    \strong{local / remote} new daemons may be set via a client URL and
    specifying '.compute' as 'remote'. This creates a new compute profile
    called 'remote'. Subsequent mirai calls may then be sent for local
    computation by not specifying its '.compute' argument, or for remote
    computation by specifying its '.compute' argument as 'remote'.

    \strong{cpu / gpu} some tasks may require access to different classes of
    server, such as those with GPUs. In this case, \code{daemons()} may be
    called twice to set up client URLs for CPU-only and GPU servers to dial
    into respectively, specifying the '.compute' argument as 'cpu' and 'gpu'
    each time. By supplying the '.compute' argument to subsequent mirai calls,
    tasks may be sent to either 'cpu' or 'gpu' servers for computation.

    Note: further actions such as viewing the status of daemons or resetting
    via \code{daemons(0)} should be carried out with the desired '.compute'
    argument specified.
}

\section{Timeouts}{


    Note: specifying the \code{.timeout} argument in \code{\link{mirai}} will
    ensure that the 'mirai' always resolves, however the process may not have
    completed and still be ongoing in the daemon. In such situations, an
    active queue may be preferable so that new tasks are not assigned to the
    busy process, however performance may still be degraded if they remain in
    use.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

# Create 2 daemons
daemons(2)

# View status
daemons()

# Reset to zero
daemons(0)

# Create 1 active queue with 2 nodes
daemons(1, nodes = 2)

# View status
daemons()

# Reset to zero
daemons(0)

}

}
